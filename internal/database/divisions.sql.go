// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: divisions.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createDivision = `-- name: CreateDivision :one
INSERT INTO divisions (division_name, school_id)
VALUES ($1, $2)
RETURNING id, division_name, school_id
`

type CreateDivisionParams struct {
	DivisionName string    `json:"division_name"`
	SchoolID     uuid.UUID `json:"school_id"`
}

func (q *Queries) CreateDivision(ctx context.Context, arg CreateDivisionParams) (Division, error) {
	row := q.db.QueryRowContext(ctx, createDivision, arg.DivisionName, arg.SchoolID)
	var i Division
	err := row.Scan(&i.ID, &i.DivisionName, &i.SchoolID)
	return i, err
}

const deleteDivision = `-- name: DeleteDivision :execrows
DELETE FROM divisions WHERE id = $1 AND school_id = $2
`

type DeleteDivisionParams struct {
	ID       int32     `json:"id"`
	SchoolID uuid.UUID `json:"school_id"`
}

func (q *Queries) DeleteDivision(ctx context.Context, arg DeleteDivisionParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteDivision, arg.ID, arg.SchoolID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getDivisionByID = `-- name: GetDivisionByID :one
SELECT id, division_name, school_id FROM divisions WHERE id = $1 AND school_id = $2
`

type GetDivisionByIDParams struct {
	ID       int32     `json:"id"`
	SchoolID uuid.UUID `json:"school_id"`
}

func (q *Queries) GetDivisionByID(ctx context.Context, arg GetDivisionByIDParams) (Division, error) {
	row := q.db.QueryRowContext(ctx, getDivisionByID, arg.ID, arg.SchoolID)
	var i Division
	err := row.Scan(&i.ID, &i.DivisionName, &i.SchoolID)
	return i, err
}

const getDivisions = `-- name: GetDivisions :many
SELECT id, division_name FROM divisions where school_id = $1
`

type GetDivisionsRow struct {
	ID           int32  `json:"id"`
	DivisionName string `json:"division_name"`
}

func (q *Queries) GetDivisions(ctx context.Context, schoolID uuid.UUID) ([]GetDivisionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDivisions, schoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDivisionsRow
	for rows.Next() {
		var i GetDivisionsRow
		if err := rows.Scan(&i.ID, &i.DivisionName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDivision = `-- name: UpdateDivision :one
UPDATE divisions SET division_name = $1
WHERE id = $2 and school_id = $3
RETURNING id, division_name, school_id
`

type UpdateDivisionParams struct {
	DivisionName string    `json:"division_name"`
	ID           int32     `json:"id"`
	SchoolID     uuid.UUID `json:"school_id"`
}

func (q *Queries) UpdateDivision(ctx context.Context, arg UpdateDivisionParams) (Division, error) {
	row := q.db.QueryRowContext(ctx, updateDivision, arg.DivisionName, arg.ID, arg.SchoolID)
	var i Division
	err := row.Scan(&i.ID, &i.DivisionName, &i.SchoolID)
	return i, err
}
