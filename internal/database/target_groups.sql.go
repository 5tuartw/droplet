// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: target_groups.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const countValidClassesForSchool = `-- name: CountValidClassesForSchool :one
SELECT count(*) FROM classes
WHERE school_id = $1 AND id = ANY($2::integer[])
`

type CountValidClassesForSchoolParams struct {
	SchoolID uuid.UUID
	Column2  []int32
}

// VALIDATE TARGETS
func (q *Queries) CountValidClassesForSchool(ctx context.Context, arg CountValidClassesForSchoolParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countValidClassesForSchool, arg.SchoolID, pq.Array(arg.Column2))
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countValidDivisionsForSchool = `-- name: CountValidDivisionsForSchool :one
SELECT count(*) FROM divisions
WHERE school_id = $1 AND id = ANY($2::integer[])
`

type CountValidDivisionsForSchoolParams struct {
	SchoolID uuid.UUID
	Column2  []int32
}

func (q *Queries) CountValidDivisionsForSchool(ctx context.Context, arg CountValidDivisionsForSchoolParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countValidDivisionsForSchool, arg.SchoolID, pq.Array(arg.Column2))
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countValidPupilsForSchool = `-- name: CountValidPupilsForSchool :one
SELECT count(*) FROM pupils
WHERE school_id = $1 AND id = ANY($2::integer[])
`

type CountValidPupilsForSchoolParams struct {
	SchoolID uuid.UUID
	Column2  []int32
}

func (q *Queries) CountValidPupilsForSchool(ctx context.Context, arg CountValidPupilsForSchoolParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countValidPupilsForSchool, arg.SchoolID, pq.Array(arg.Column2))
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countValidYearGroupsForSchool = `-- name: CountValidYearGroupsForSchool :one

SELECT count(*) FROM year_groups
WHERE school_id = $1 AND id = ANY($2::integer[])
`

type CountValidYearGroupsForSchoolParams struct {
	SchoolID uuid.UUID
	Column2  []int32
}

// Adjust $2 type if needed
func (q *Queries) CountValidYearGroupsForSchool(ctx context.Context, arg CountValidYearGroupsForSchoolParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countValidYearGroupsForSchool, arg.SchoolID, pq.Array(arg.Column2))
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteClass = `-- name: DeleteClass :exec

DELETE FROM classes WHERE school_id = $1 AND id = $2
`

type DeleteClassParams struct {
	SchoolID uuid.UUID
	ID       int32
}

// DELETE TARGET GROUPS
func (q *Queries) DeleteClass(ctx context.Context, arg DeleteClassParams) error {
	_, err := q.db.ExecContext(ctx, deleteClass, arg.SchoolID, arg.ID)
	return err
}

const deleteDivision = `-- name: DeleteDivision :exec
DELETE FROM divisions WHERE school_id = $1 AND id = $2
`

type DeleteDivisionParams struct {
	SchoolID uuid.UUID
	ID       int32
}

func (q *Queries) DeleteDivision(ctx context.Context, arg DeleteDivisionParams) error {
	_, err := q.db.ExecContext(ctx, deleteDivision, arg.SchoolID, arg.ID)
	return err
}

const deleteYearGroup = `-- name: DeleteYearGroup :exec
DELETE FROM year_groups WHERE school_id = $1 AND id = $2
`

type DeleteYearGroupParams struct {
	SchoolID uuid.UUID
	ID       int32
}

func (q *Queries) DeleteYearGroup(ctx context.Context, arg DeleteYearGroupParams) error {
	_, err := q.db.ExecContext(ctx, deleteYearGroup, arg.SchoolID, arg.ID)
	return err
}

const getClasses = `-- name: GetClasses :many
SELECT id, class_name FROM classes where school_id = $1
`

type GetClassesRow struct {
	ID        int32
	ClassName string
}

func (q *Queries) GetClasses(ctx context.Context, schoolID uuid.UUID) ([]GetClassesRow, error) {
	rows, err := q.db.QueryContext(ctx, getClasses, schoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClassesRow
	for rows.Next() {
		var i GetClassesRow
		if err := rows.Scan(&i.ID, &i.ClassName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDivisions = `-- name: GetDivisions :many
SELECT id, division_name FROM divisions where school_id = $1
`

type GetDivisionsRow struct {
	ID           int32
	DivisionName string
}

func (q *Queries) GetDivisions(ctx context.Context, schoolID uuid.UUID) ([]GetDivisionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDivisions, schoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDivisionsRow
	for rows.Next() {
		var i GetDivisionsRow
		if err := rows.Scan(&i.ID, &i.DivisionName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPupils = `-- name: GetPupils :many
SELECT id, first_name, surname FROM pupils where school_id = $1
`

type GetPupilsRow struct {
	ID        int32
	FirstName string
	Surname   string
}

func (q *Queries) GetPupils(ctx context.Context, schoolID uuid.UUID) ([]GetPupilsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPupils, schoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPupilsRow
	for rows.Next() {
		var i GetPupilsRow
		if err := rows.Scan(&i.ID, &i.FirstName, &i.Surname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYearGroups = `-- name: GetYearGroups :many
SELECT id, year_group_name FROM year_groups where school_id = $1
`

type GetYearGroupsRow struct {
	ID            int32
	YearGroupName string
}

func (q *Queries) GetYearGroups(ctx context.Context, schoolID uuid.UUID) ([]GetYearGroupsRow, error) {
	rows, err := q.db.QueryContext(ctx, getYearGroups, schoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetYearGroupsRow
	for rows.Next() {
		var i GetYearGroupsRow
		if err := rows.Scan(&i.ID, &i.YearGroupName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
