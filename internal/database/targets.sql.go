// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: targets.sql

package database

import (
	"context"
)

const getClasses = `-- name: GetClasses :many
SELECT id, class_name FROM classes
`

type GetClassesRow struct {
	ID        int32
	ClassName string
}

func (q *Queries) GetClasses(ctx context.Context) ([]GetClassesRow, error) {
	rows, err := q.db.QueryContext(ctx, getClasses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClassesRow
	for rows.Next() {
		var i GetClassesRow
		if err := rows.Scan(&i.ID, &i.ClassName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDivisions = `-- name: GetDivisions :many
SELECT id, division_name FROM divisions
`

func (q *Queries) GetDivisions(ctx context.Context) ([]Division, error) {
	rows, err := q.db.QueryContext(ctx, getDivisions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Division
	for rows.Next() {
		var i Division
		if err := rows.Scan(&i.ID, &i.DivisionName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPupils = `-- name: GetPupils :many
SELECT id, first_name, surname FROM pupils
`

type GetPupilsRow struct {
	ID        int32
	FirstName string
	Surname   string
}

func (q *Queries) GetPupils(ctx context.Context) ([]GetPupilsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPupils)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPupilsRow
	for rows.Next() {
		var i GetPupilsRow
		if err := rows.Scan(&i.ID, &i.FirstName, &i.Surname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYearGroups = `-- name: GetYearGroups :many
SELECT id, year_group_name FROM year_groups
`

type GetYearGroupsRow struct {
	ID            int32
	YearGroupName string
}

func (q *Queries) GetYearGroups(ctx context.Context) ([]GetYearGroupsRow, error) {
	rows, err := q.db.QueryContext(ctx, getYearGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetYearGroupsRow
	for rows.Next() {
		var i GetYearGroupsRow
		if err := rows.Scan(&i.ID, &i.YearGroupName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
