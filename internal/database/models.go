// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type TargetType string

const (
	TargetTypeStudent     TargetType = "Student"
	TargetTypeClass       TargetType = "Class"
	TargetTypeYearGroup   TargetType = "YearGroup"
	TargetTypeDivision    TargetType = "Division"
	TargetTypeCustomGroup TargetType = "CustomGroup"
	TargetTypeGeneral     TargetType = "General"
)

func (e *TargetType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TargetType(s)
	case string:
		*e = TargetType(s)
	default:
		return fmt.Errorf("unsupported scan type for TargetType: %T", src)
	}
	return nil
}

type NullTargetType struct {
	TargetType TargetType
	Valid      bool // Valid is true if TargetType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTargetType) Scan(value interface{}) error {
	if value == nil {
		ns.TargetType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TargetType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTargetType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TargetType), nil
}

type UserRole string

const (
	UserRoleUser  UserRole = "user"
	UserRoleAdmin UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Class struct {
	ID          int32
	ClassName   string
	YearGroupID sql.NullInt32
	TeacherID   uuid.NullUUID
}

type CustomGroup struct {
	ID        int32
	GroupName string
	TeacherID uuid.NullUUID
}

type CustomGroupMember struct {
	GroupID int32
	PupilID int32
}

type Division struct {
	ID           int32
	DivisionName string
}

type Drop struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	Title      string
	Content    string
	CreatedAt  time.Time
	UpdatedAt  time.Time
	PostDate   time.Time
	ExpireDate time.Time
	EditedBy   uuid.NullUUID
}

type DropConfirmation struct {
	DropID      uuid.UUID
	UserID      uuid.UUID
	ConfirmedAt sql.NullTime
	Confirmed   sql.NullBool
}

type DropTarget struct {
	ID       int32
	DropID   uuid.UUID
	Type     TargetType
	TargetID sql.NullInt32
}

type DropView struct {
	DropID   uuid.UUID
	UserID   uuid.UUID
	ViewedAt time.Time
}

type Pupil struct {
	ID        int32
	FirstName string
	Surname   string
	ClassID   sql.NullInt32
}

type RefreshToken struct {
	Token     string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	ExpiresAt time.Time
	RevokedAt sql.NullTime
	Role      UserRole
}

type TargetSubscription struct {
	UserID   uuid.UUID
	Type     TargetType
	TargetID int32
}

type User struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	HashedPassword string
	Role           UserRole
	Title          string
	FirstName      string
	Surname        string
}

type UserSetting struct {
	UserID     uuid.UUID
	ColorTheme string
	LayoutPref string
	UpdatedAt  time.Time
}

type YearGroup struct {
	ID            int32
	YearGroupName string
	DivisionID    sql.NullInt32
}
