// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

type TargetType string

const (
	TargetTypeStudent     TargetType = "Student"
	TargetTypeClass       TargetType = "Class"
	TargetTypeYearGroup   TargetType = "YearGroup"
	TargetTypeDivision    TargetType = "Division"
	TargetTypeCustomGroup TargetType = "CustomGroup"
	TargetTypeGeneral     TargetType = "General"
)

func (e *TargetType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TargetType(s)
	case string:
		*e = TargetType(s)
	default:
		return fmt.Errorf("unsupported scan type for TargetType: %T", src)
	}
	return nil
}

type NullTargetType struct {
	TargetType TargetType `json:"target_type"`
	Valid      bool       `json:"valid"` // Valid is true if TargetType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTargetType) Scan(value interface{}) error {
	if value == nil {
		ns.TargetType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TargetType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTargetType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TargetType), nil
}

type UserRole string

const (
	UserRoleUser  UserRole = "user"
	UserRoleAdmin UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Class struct {
	ID          int32         `json:"id"`
	ClassName   string        `json:"class_name"`
	YearGroupID sql.NullInt32 `json:"year_group_id"`
	TeacherID   uuid.NullUUID `json:"teacher_id"`
	SchoolID    uuid.UUID     `json:"school_id"`
}

type CustomGroup struct {
	ID        int32         `json:"id"`
	GroupName string        `json:"group_name"`
	TeacherID uuid.NullUUID `json:"teacher_id"`
	SchoolID  uuid.UUID     `json:"school_id"`
}

type CustomGroupMember struct {
	GroupID int32 `json:"group_id"`
	PupilID int32 `json:"pupil_id"`
}

type Division struct {
	ID           int32     `json:"id"`
	DivisionName string    `json:"division_name"`
	SchoolID     uuid.UUID `json:"school_id"`
}

type Drop struct {
	ID         uuid.UUID     `json:"id"`
	UserID     uuid.UUID     `json:"user_id"`
	Title      string        `json:"title"`
	Content    string        `json:"content"`
	CreatedAt  time.Time     `json:"created_at"`
	UpdatedAt  time.Time     `json:"updated_at"`
	PostDate   time.Time     `json:"post_date"`
	ExpireDate time.Time     `json:"expire_date"`
	EditedBy   uuid.NullUUID `json:"edited_by"`
	SchoolID   uuid.UUID     `json:"school_id"`
}

type DropConfirmation struct {
	DropID      uuid.UUID    `json:"drop_id"`
	UserID      uuid.UUID    `json:"user_id"`
	ConfirmedAt sql.NullTime `json:"confirmed_at"`
	Confirmed   sql.NullBool `json:"confirmed"`
	SchoolID    uuid.UUID    `json:"school_id"`
}

type DropTarget struct {
	ID       int32         `json:"id"`
	DropID   uuid.UUID     `json:"drop_id"`
	Type     TargetType    `json:"type"`
	TargetID sql.NullInt32 `json:"target_id"`
	SchoolID uuid.UUID     `json:"school_id"`
}

type DropView struct {
	DropID   uuid.UUID `json:"drop_id"`
	UserID   uuid.UUID `json:"user_id"`
	ViewedAt time.Time `json:"viewed_at"`
	SchoolID uuid.UUID `json:"school_id"`
}

type Pupil struct {
	ID        int32         `json:"id"`
	FirstName string        `json:"first_name"`
	Surname   string        `json:"surname"`
	ClassID   sql.NullInt32 `json:"class_id"`
	SchoolID  uuid.UUID     `json:"school_id"`
}

type RefreshToken struct {
	Token     string       `json:"token"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt time.Time    `json:"updated_at"`
	UserID    uuid.UUID    `json:"user_id"`
	ExpiresAt time.Time    `json:"expires_at"`
	RevokedAt sql.NullTime `json:"revoked_at"`
	Role      UserRole     `json:"role"`
	SchoolID  uuid.UUID    `json:"school_id"`
}

type School struct {
	ID           uuid.UUID             `json:"id"`
	Name         string                `json:"name"`
	CreatedAt    time.Time             `json:"created_at"`
	UpdatedAt    time.Time             `json:"updated_at"`
	Address      sql.NullString        `json:"address"`
	ContactEmail sql.NullString        `json:"contact_email"`
	ContactPhone sql.NullString        `json:"contact_phone"`
	Subdomain    sql.NullString        `json:"subdomain"`
	LogoUrl      sql.NullString        `json:"logo_url"`
	Status       sql.NullString        `json:"status"`
	Settings     pqtype.NullRawMessage `json:"settings"`
}

type TargetSubscription struct {
	UserID   uuid.UUID  `json:"user_id"`
	Type     TargetType `json:"type"`
	TargetID int32      `json:"target_id"`
	SchoolID uuid.UUID  `json:"school_id"`
}

type User struct {
	ID             uuid.UUID `json:"id"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
	Email          string    `json:"email"`
	HashedPassword string    `json:"hashed_password"`
	Role           UserRole  `json:"role"`
	Title          string    `json:"title"`
	FirstName      string    `json:"first_name"`
	Surname        string    `json:"surname"`
	SchoolID       uuid.UUID `json:"school_id"`
}

type UserSetting struct {
	UserID     uuid.UUID `json:"user_id"`
	ColorTheme string    `json:"color_theme"`
	LayoutPref string    `json:"layout_pref"`
	UpdatedAt  time.Time `json:"updated_at"`
	SchoolID   uuid.UUID `json:"school_id"`
}

type YearGroup struct {
	ID            int32         `json:"id"`
	YearGroupName string        `json:"year_group_name"`
	DivisionID    sql.NullInt32 `json:"division_id"`
	SchoolID      uuid.UUID     `json:"school_id"`
}
