// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: drop_targets.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addDropTarget = `-- name: AddDropTarget :one
INSERT INTO drop_targets (drop_id, type, target_id)
VALUES (
    $1,
    $2,
    $3
)
RETURNING id, drop_id, type, target_id
`

type AddDropTargetParams struct {
	DropID   uuid.UUID
	Type     TargetType
	TargetID sql.NullInt32
}

func (q *Queries) AddDropTarget(ctx context.Context, arg AddDropTargetParams) (DropTarget, error) {
	row := q.db.QueryRowContext(ctx, addDropTarget, arg.DropID, arg.Type, arg.TargetID)
	var i DropTarget
	err := row.Scan(
		&i.ID,
		&i.DropID,
		&i.Type,
		&i.TargetID,
	)
	return i, err
}

const getDropsForCurrentUser = `-- name: GetDropsForCurrentUser :many
SELECT d.id, d.user_id, d.title, d.content, d.created_at, d.updated_at, d.post_date, d.expire_date
FROM drops d
JOIN drop_targets dt ON d.id = dt.drop_id
WHERE
    (dt.type = 'General'
    OR (dt.type = 'Class' AND dt.target_id = (SELECT id FROM classes WHERE classes.teacher_id = $1))
    OR (dt.type = 'YearGroup' AND dt.target_id = (SELECT year_group_id FROM classes WHERE classes.teacher_id = $1))
    OR (dt.type = 'Division' AND dt.target_id = (SELECT division_id FROM year_groups WHERE year_groups.id = (SELECT year_group_id FROM classes WHERE classes.teacher_id = $1))))
    AND (d.expire_date IS NULL OR d.expire_date > NOW())
ORDER BY d.post_date DESC
`

func (q *Queries) GetDropsForCurrentUser(ctx context.Context, teacherID uuid.NullUUID) ([]Drop, error) {
	rows, err := q.db.QueryContext(ctx, getDropsForCurrentUser, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Drop
	for rows.Next() {
		var i Drop
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PostDate,
			&i.ExpireDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
