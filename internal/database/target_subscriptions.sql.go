// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: target_subscriptions.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addTargetSubscription = `-- name: AddTargetSubscription :exec
INSERT INTO target_subscriptions (user_id, school_id, type, target_id)
VALUES ($1, $2, $3, $4)
`

type AddTargetSubscriptionParams struct {
	UserID   uuid.UUID  `json:"user_id"`
	SchoolID uuid.UUID  `json:"school_id"`
	Type     TargetType `json:"type"`
	TargetID int32      `json:"target_id"`
}

func (q *Queries) AddTargetSubscription(ctx context.Context, arg AddTargetSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, addTargetSubscription,
		arg.UserID,
		arg.SchoolID,
		arg.Type,
		arg.TargetID,
	)
	return err
}

const deleteTargetSubscriptions = `-- name: DeleteTargetSubscriptions :exec
DELETE FROM target_subscriptions WHERE user_id = $1 AND school_id = $2
`

type DeleteTargetSubscriptionsParams struct {
	UserID   uuid.UUID `json:"user_id"`
	SchoolID uuid.UUID `json:"school_id"`
}

func (q *Queries) DeleteTargetSubscriptions(ctx context.Context, arg DeleteTargetSubscriptionsParams) error {
	_, err := q.db.ExecContext(ctx, deleteTargetSubscriptions, arg.UserID, arg.SchoolID)
	return err
}

const getSubscriptionsForUser = `-- name: GetSubscriptionsForUser :many
SELECT
    ts.type AS target_type,
    ts.target_id AS target_id,
    COALESCE(
        cls.class_name,
        yg.year_group_name,
        div.division_name
    )::text AS target_name      -- Cast result to text for sqlc string mapping

FROM
    target_subscriptions ts
LEFT JOIN
    classes cls ON ts.type = 'Class' AND ts.target_id = cls.id
LEFT JOIN
    year_groups yg ON ts.type = 'YearGroup' AND ts.target_id = yg.id
LEFT JOIN
    divisions div ON ts.type = 'Division' AND ts.target_id = div.id

WHERE
    ts.user_id = $1 and ts.school_id = $2

ORDER BY
    ts.type, target_name
`

type GetSubscriptionsForUserParams struct {
	UserID   uuid.UUID `json:"user_id"`
	SchoolID uuid.UUID `json:"school_id"`
}

type GetSubscriptionsForUserRow struct {
	TargetType TargetType `json:"target_type"`
	TargetID   int32      `json:"target_id"`
	TargetName string     `json:"target_name"`
}

// LEFT JOINs to get names
func (q *Queries) GetSubscriptionsForUser(ctx context.Context, arg GetSubscriptionsForUserParams) ([]GetSubscriptionsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getSubscriptionsForUser, arg.UserID, arg.SchoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSubscriptionsForUserRow
	for rows.Next() {
		var i GetSubscriptionsForUserRow
		if err := rows.Scan(&i.TargetType, &i.TargetID, &i.TargetName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
