// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: drops.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createDrop = `-- name: CreateDrop :one
INSERT INTO drops (id, user_id, school_id, title, content, created_at, updated_at, post_date, expire_date)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    NOW(),
    NOW(),
    $5,
    $6   
)
RETURNING id, user_id, title, content, created_at, updated_at, post_date, expire_date, edited_by, school_id
`

type CreateDropParams struct {
	UserID     uuid.UUID
	SchoolID   uuid.UUID
	Title      string
	Content    string
	PostDate   time.Time
	ExpireDate time.Time
}

func (q *Queries) CreateDrop(ctx context.Context, arg CreateDropParams) (Drop, error) {
	row := q.db.QueryRowContext(ctx, createDrop,
		arg.UserID,
		arg.SchoolID,
		arg.Title,
		arg.Content,
		arg.PostDate,
		arg.ExpireDate,
	)
	var i Drop
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PostDate,
		&i.ExpireDate,
		&i.EditedBy,
		&i.SchoolID,
	)
	return i, err
}

const deleteDrop = `-- name: DeleteDrop :exec
DELETE FROM drops WHERE id = $1 AND school_id = $2
`

type DeleteDropParams struct {
	ID       uuid.UUID
	SchoolID uuid.UUID
}

func (q *Queries) DeleteDrop(ctx context.Context, arg DeleteDropParams) error {
	_, err := q.db.ExecContext(ctx, deleteDrop, arg.ID, arg.SchoolID)
	return err
}

const getActiveDrops = `-- name: GetActiveDrops :many
SELECT id, user_id, title, content, created_at, updated_at, post_date, expire_date, edited_by, school_id FROM drops WHERE expire_date > NOW() AND school_id = $1 ORDER BY post_date DESC
`

func (q *Queries) GetActiveDrops(ctx context.Context, schoolID uuid.UUID) ([]Drop, error) {
	rows, err := q.db.QueryContext(ctx, getActiveDrops, schoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Drop
	for rows.Next() {
		var i Drop
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PostDate,
			&i.ExpireDate,
			&i.EditedBy,
			&i.SchoolID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDropByID = `-- name: GetDropByID :one
SELECT id, user_id, title, content, created_at, updated_at, post_date, expire_date, edited_by, school_id FROM drops WHERE id = $1 AND school_id = $2
`

type GetDropByIDParams struct {
	ID       uuid.UUID
	SchoolID uuid.UUID
}

func (q *Queries) GetDropByID(ctx context.Context, arg GetDropByIDParams) (Drop, error) {
	row := q.db.QueryRowContext(ctx, getDropByID, arg.ID, arg.SchoolID)
	var i Drop
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PostDate,
		&i.ExpireDate,
		&i.EditedBy,
		&i.SchoolID,
	)
	return i, err
}

const getDropWithTargetsByID = `-- name: GetDropWithTargetsByID :many
SELECT
    d.id AS drop_id,
    d.user_id AS drop_user_id,
    d.title AS drop_title,
    d.content AS drop_content,
    d.post_date AS drop_post_date,
    d.expire_date AS drop_expire_date,
    d.created_at AS drop_created_at,
    d.updated_at AS drop_updated_at,
    d.edited_by AS drop_edited_by,
    -- Target details (will be NULL if drop has no targets)
    dt.type AS target_type,
    dt.target_id AS target_id,
    -- Target name (will be NULL if no target or name missing)
    COALESCE(
        cls.class_name,
        yg.year_group_name,
        div.division_name,
        p.surname || ', ' || p.first_name,
        'General' -- fallback
    ) AS target_name,
    COALESCE(cls.class_name, yg.year_group_name, div.division_name, p.surname || ', ' || p.first_name, 'General') AS target_name,
    -- Author Name (Concatenated, assumes author exists)
    COALESCE(CONCAT_WS(' ', author.first_name, author.surname), 'Unknown Author')::text AS author_name,
    -- Editor Name (Concatenated, handles NULL editor via LEFT JOIN + COALESCE on final result)
    COALESCE(CONCAT_WS(' ', editor.first_name,  editor.surname))::text AS editor_name -- This might be NULL if no editor
FROM
    drops d
LEFT JOIN
    drop_targets dt ON d.id = dt.drop_id
LEFT JOIN
    classes cls ON dt.type = 'Class' AND dt.target_id = cls.id
LEFT JOIN
    year_groups yg ON dt.type = 'YearGroup' AND dt.target_id = yg.id
LEFT JOIN
    divisions div ON dt.type = 'Division' AND dt.target_id = div.id
LEFT JOIN
    pupils p ON dt.type = 'Student' AND dt.target_id = p.id
LEFT JOIN
    users AS author ON d.user_id = author.id
LEFT JOIN
    users AS editor on d.edited_by = editor.id
WHERE
    d.id = $1 -- Filter for the specific drop ID
AND d.school_id = $2
ORDER BY
    dt.type
`

type GetDropWithTargetsByIDParams struct {
	ID       uuid.UUID
	SchoolID uuid.UUID
}

type GetDropWithTargetsByIDRow struct {
	DropID         uuid.UUID
	DropUserID     uuid.UUID
	DropTitle      string
	DropContent    string
	DropPostDate   time.Time
	DropExpireDate time.Time
	DropCreatedAt  time.Time
	DropUpdatedAt  time.Time
	DropEditedBy   uuid.NullUUID
	TargetType     NullTargetType
	TargetID       sql.NullInt32
	TargetName     string
	TargetName_2   string
	AuthorName     string
	EditorName     string
}

func (q *Queries) GetDropWithTargetsByID(ctx context.Context, arg GetDropWithTargetsByIDParams) ([]GetDropWithTargetsByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getDropWithTargetsByID, arg.ID, arg.SchoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDropWithTargetsByIDRow
	for rows.Next() {
		var i GetDropWithTargetsByIDRow
		if err := rows.Scan(
			&i.DropID,
			&i.DropUserID,
			&i.DropTitle,
			&i.DropContent,
			&i.DropPostDate,
			&i.DropExpireDate,
			&i.DropCreatedAt,
			&i.DropUpdatedAt,
			&i.DropEditedBy,
			&i.TargetType,
			&i.TargetID,
			&i.TargetName,
			&i.TargetName_2,
			&i.AuthorName,
			&i.EditorName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserIdFromDropID = `-- name: GetUserIdFromDropID :one
SELECT user_id FROM drops WHERE id = $1 AND school_id = $2
`

type GetUserIdFromDropIDParams struct {
	ID       uuid.UUID
	SchoolID uuid.UUID
}

func (q *Queries) GetUserIdFromDropID(ctx context.Context, arg GetUserIdFromDropIDParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserIdFromDropID, arg.ID, arg.SchoolID)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const updateDrop = `-- name: UpdateDrop :exec
UPDATE drops
SET title = $3, content = $4, post_date = $5, expire_date = $6, updated_at = NOW(), edited_by = $7
WHERE id = $1 and school_id = $2
`

type UpdateDropParams struct {
	ID         uuid.UUID
	SchoolID   uuid.UUID
	Title      string
	Content    string
	PostDate   time.Time
	ExpireDate time.Time
	EditedBy   uuid.NullUUID
}

func (q *Queries) UpdateDrop(ctx context.Context, arg UpdateDropParams) error {
	_, err := q.db.ExecContext(ctx, updateDrop,
		arg.ID,
		arg.SchoolID,
		arg.Title,
		arg.Content,
		arg.PostDate,
		arg.ExpireDate,
		arg.EditedBy,
	)
	return err
}
