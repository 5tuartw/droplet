// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: drops.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDrop = `-- name: CreateDrop :one
INSERT INTO drops (id, user_id, title, content, created_at, updated_at, post_date, expire_date)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    NOW(),
    NOW(),
    $4,
    $5
)
RETURNING id, user_id, title, content, created_at, updated_at, post_date, expire_date
`

type CreateDropParams struct {
	UserID     uuid.UUID
	Title      string
	Content    string
	PostDate   time.Time
	ExpireDate time.Time
}

func (q *Queries) CreateDrop(ctx context.Context, arg CreateDropParams) (Drop, error) {
	row := q.db.QueryRowContext(ctx, createDrop,
		arg.UserID,
		arg.Title,
		arg.Content,
		arg.PostDate,
		arg.ExpireDate,
	)
	var i Drop
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PostDate,
		&i.ExpireDate,
	)
	return i, err
}

const deleteDrop = `-- name: DeleteDrop :exec
DELETE FROM drops WHERE id = $1
`

func (q *Queries) DeleteDrop(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDrop, id)
	return err
}
