// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: year_groups.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countYearGroupsInDivision = `-- name: CountYearGroupsInDivision :one
SELECT count(*) from year_groups
WHERE division_id = $1 AND school_id = $2
`

type CountYearGroupsInDivisionParams struct {
	DivisionID sql.NullInt32 `json:"division_id"`
	SchoolID   uuid.UUID     `json:"school_id"`
}

func (q *Queries) CountYearGroupsInDivision(ctx context.Context, arg CountYearGroupsInDivisionParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countYearGroupsInDivision, arg.DivisionID, arg.SchoolID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createYearGroup = `-- name: CreateYearGroup :one
INSERT INTO year_groups (year_group_name, division_id, school_id)
VALUES ($1, $2, $3)
RETURNING id, year_group_name, division_id, school_id
`

type CreateYearGroupParams struct {
	YearGroupName string        `json:"year_group_name"`
	DivisionID    sql.NullInt32 `json:"division_id"`
	SchoolID      uuid.UUID     `json:"school_id"`
}

func (q *Queries) CreateYearGroup(ctx context.Context, arg CreateYearGroupParams) (YearGroup, error) {
	row := q.db.QueryRowContext(ctx, createYearGroup, arg.YearGroupName, arg.DivisionID, arg.SchoolID)
	var i YearGroup
	err := row.Scan(
		&i.ID,
		&i.YearGroupName,
		&i.DivisionID,
		&i.SchoolID,
	)
	return i, err
}

const deleteYearGroup = `-- name: DeleteYearGroup :execrows
DELETE FROM year_groups WHERE id = $1 AND school_id = $2
`

type DeleteYearGroupParams struct {
	ID       int32     `json:"id"`
	SchoolID uuid.UUID `json:"school_id"`
}

func (q *Queries) DeleteYearGroup(ctx context.Context, arg DeleteYearGroupParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteYearGroup, arg.ID, arg.SchoolID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getYearGroupByID = `-- name: GetYearGroupByID :one
SELECT id, year_group_name, division_id, school_id FROM year_groups WHERE id = $1 AND school_id = $2
`

type GetYearGroupByIDParams struct {
	ID       int32     `json:"id"`
	SchoolID uuid.UUID `json:"school_id"`
}

func (q *Queries) GetYearGroupByID(ctx context.Context, arg GetYearGroupByIDParams) (YearGroup, error) {
	row := q.db.QueryRowContext(ctx, getYearGroupByID, arg.ID, arg.SchoolID)
	var i YearGroup
	err := row.Scan(
		&i.ID,
		&i.YearGroupName,
		&i.DivisionID,
		&i.SchoolID,
	)
	return i, err
}

const getYearGroups = `-- name: GetYearGroups :many
SELECT id, year_group_name, division_id FROM year_groups where school_id = $1 ORDER BY year_group_name
`

type GetYearGroupsRow struct {
	ID            int32         `json:"id"`
	YearGroupName string        `json:"year_group_name"`
	DivisionID    sql.NullInt32 `json:"division_id"`
}

func (q *Queries) GetYearGroups(ctx context.Context, schoolID uuid.UUID) ([]GetYearGroupsRow, error) {
	rows, err := q.db.QueryContext(ctx, getYearGroups, schoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetYearGroupsRow
	for rows.Next() {
		var i GetYearGroupsRow
		if err := rows.Scan(&i.ID, &i.YearGroupName, &i.DivisionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYearGroupsInDivision = `-- name: GetYearGroupsInDivision :many
SELECT id, year_group_name, division_id, school_id FROM year_groups WHERE division_id = $1 and school_id = $2
`

type GetYearGroupsInDivisionParams struct {
	DivisionID sql.NullInt32 `json:"division_id"`
	SchoolID   uuid.UUID     `json:"school_id"`
}

func (q *Queries) GetYearGroupsInDivision(ctx context.Context, arg GetYearGroupsInDivisionParams) ([]YearGroup, error) {
	rows, err := q.db.QueryContext(ctx, getYearGroupsInDivision, arg.DivisionID, arg.SchoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []YearGroup
	for rows.Next() {
		var i YearGroup
		if err := rows.Scan(
			&i.ID,
			&i.YearGroupName,
			&i.DivisionID,
			&i.SchoolID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const moveYearGroup = `-- name: MoveYearGroup :execrows
UPDATE year_groups SET division_id = $1
WHERE id = $2 and school_id = $3
`

type MoveYearGroupParams struct {
	DivisionID sql.NullInt32 `json:"division_id"`
	ID         int32         `json:"id"`
	SchoolID   uuid.UUID     `json:"school_id"`
}

func (q *Queries) MoveYearGroup(ctx context.Context, arg MoveYearGroupParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, moveYearGroup, arg.DivisionID, arg.ID, arg.SchoolID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const renameYearGroup = `-- name: RenameYearGroup :execrows
UPDATE year_groups SET year_group_name = $1
WHERE id = $2 and school_id = $3
`

type RenameYearGroupParams struct {
	YearGroupName string    `json:"year_group_name"`
	ID            int32     `json:"id"`
	SchoolID      uuid.UUID `json:"school_id"`
}

func (q *Queries) RenameYearGroup(ctx context.Context, arg RenameYearGroupParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, renameYearGroup, arg.YearGroupName, arg.ID, arg.SchoolID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
