package api_test

import (
	"bytes"
	"context"
	"database/sql"
	"encoding/json"
	"log"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/5tuartw/droplet/internal/database"
	"github.com/5tuartw/droplet/internal/models"
	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"golang.org/x/crypto/bcrypt"
)

func seedTestUser(t *testing.T, db *sql.DB, email string, rawPassword string, isAdmin bool) uuid.UUID {
	t.Helper() // mark this as test helper function

	if testDB == nil {
		t.Fatalf("Test database connection pool (testDB) is nil")
	}

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(rawPassword), bcrypt.DefaultCost)
	if err != nil {
		log.Fatalf("Failed to hash password for test user %s: %v", email, err)
	}

	q := database.New(db)
	var userRole string
	if isAdmin {
		userRole = "admin"
	} else {
		userRole = "user"
	}
	params := database.CreateUserParams{
		Email:          email,
		HashedPassword: string(hashedPassword),
		Role:           database.UserRole(userRole),
		Title:          "Ms",
		FirstName:      "Test",
		Surname:        "User",
	}

	user, err := q.CreateUser(context.Background(), params)
	if err != nil {
		t.Fatalf("Failed to seed user %s using sqlc CreateUser: %v", email, err)
	}

	log.Printf("Seeded user %s with ID %s\n", email, user.ID)
	return user.ID
}

func TestUserLogin(t *testing.T) {
	if testDB == nil {
		t.Fatalf("Test database connection pool (testDB) is nil")
	}

	// Seed a test user
	userEmail := "login.test@example.com"
	userPassword := "password123"
	userID := seedTestUser(t, testDB, userEmail, userPassword, false)

	loginCredentials := map[string]string{
		"email":    userEmail,
		"password": userPassword,
	}

	// set up request
	requestBodyBytes, err := json.Marshal(loginCredentials)
	if err != nil {
		t.Fatalf("Failed to marshal login request body %v", err)
	}

	req, err := http.NewRequest("POST", "/api/login", bytes.NewBuffer(requestBodyBytes))
	if err != nil {
		t.Fatalf("Failed to create request: %v", err)
	}
	req.Header.Set("Content-Type", "application/json")

	// Create test
	rr := httptest.NewRecorder() // acts like ResponseWriter but records results
	testServer := newTestServer(t, testDB)
	testServer.ServeHTTP(rr, req)

	// Test the response
	require.Equal(t, http.StatusOK, rr.Code)

	var responseBody models.TokenUser
	err = json.Unmarshal(rr.Body.Bytes(), &responseBody)
	require.NoError(t, err, "Failed to unmarshal response body")
	assert.Equal(t, userID, responseBody.ID, "Response ID should equal ID generated by seedTestUser")
	assert.NotEmpty(t, responseBody.Token, "Token should not be empty")
	assert.NotEmpty(t, responseBody.RefreshToken, "Refresh token should not be empty")
	assert.Equal(t, userEmail, responseBody.Email, "Response email should match request email")
	assert.Equal(t, "user", responseBody.Role, "Response role should be 'user' for non-admin seed")
	assert.Equal(t, "application/json", rr.Header().Get("Content-Type"), "Content-Type should be application/json")
}
